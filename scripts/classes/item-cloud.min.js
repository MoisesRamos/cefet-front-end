(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

(function () {
  'use strict';

  var CloudItem = function () {
    function CloudItem(text) {
      _classCallCheck(this, CloudItem);

      this.text = text;
      this.color = Math.round(Math.random() * 155 + 100);
      this.size = Math.random() * 150 + 50;
    }

    _createClass(CloudItem, [{
      key: 'render',
      value: function render() {
        this.el = document.createElement('span');
        this.el.innerHTML = this.text;
        this.el.style.fontSize = this.size + '%';
        this.el.style.color = 'rgb(' + this.color + ', ' + this.color + ', ' + this.color + ')';
        this.el.classList.add('clouditem');
        this.hasBeenPositenedRelatively = false;
        return this.el;
      }
    }]);

    return CloudItem;
  }();

  var Cloud = function () {
    function Cloud(el) {
      _classCallCheck(this, Cloud);

      this.el = el;
      this.el.classList.add('itemcloud');
      this.textItems = this.el.innerHTML.split(/<li>/);
      // this.textItems = this.el.innerHTML.split('\n-');
      this.buildCloudItems();
    }

    _createClass(Cloud, [{
      key: 'buildCloudItems',
      value: function buildCloudItems() {
        this.el.innerHTML = '';
        this.items = [];
        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
          for (var _iterator = this.textItems[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var text = _step.value;

            text = text.trim();
            if (text !== '') {
              var newItem = new CloudItem(text);
              this.items.push(newItem);
              this.el.appendChild(newItem.render());
            }
          }
        } catch (err) {
          _didIteratorError = true;
          _iteratorError = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion && _iterator.return) {
              _iterator.return();
            }
          } finally {
            if (_didIteratorError) {
              throw _iteratorError;
            }
          }
        }
      }
    }]);

    return Cloud;
  }();

  var itemCloudSlides = document.querySelectorAll('[data-state="itemcloud"]');

  [].forEach.call(itemCloudSlides, function (el) {
    new Cloud(el);
  });
})();

},{}]},{},[1])

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJzY3JpcHRzL2NsYXNzZXMvaXRlbS1jbG91ZC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQ0FBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiBlKHQsbixyKXtmdW5jdGlvbiBzKG8sdSl7aWYoIW5bb10pe2lmKCF0W29dKXt2YXIgYT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2lmKCF1JiZhKXJldHVybiBhKG8sITApO2lmKGkpcmV0dXJuIGkobywhMCk7dmFyIGY9bmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIitvK1wiJ1wiKTt0aHJvdyBmLmNvZGU9XCJNT0RVTEVfTk9UX0ZPVU5EXCIsZn12YXIgbD1uW29dPXtleHBvcnRzOnt9fTt0W29dWzBdLmNhbGwobC5leHBvcnRzLGZ1bmN0aW9uKGUpe3ZhciBuPXRbb11bMV1bZV07cmV0dXJuIHMobj9uOmUpfSxsLGwuZXhwb3J0cyxlLHQsbixyKX1yZXR1cm4gbltvXS5leHBvcnRzfXZhciBpPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7Zm9yKHZhciBvPTA7bzxyLmxlbmd0aDtvKyspcyhyW29dKTtyZXR1cm4gc30pIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG4oZnVuY3Rpb24gKCkge1xuICAndXNlIHN0cmljdCc7XG5cbiAgdmFyIENsb3VkSXRlbSA9IGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBDbG91ZEl0ZW0odGV4dCkge1xuICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIENsb3VkSXRlbSk7XG5cbiAgICAgIHRoaXMudGV4dCA9IHRleHQ7XG4gICAgICB0aGlzLmNvbG9yID0gTWF0aC5yb3VuZChNYXRoLnJhbmRvbSgpICogMTU1ICsgMTAwKTtcbiAgICAgIHRoaXMuc2l6ZSA9IE1hdGgucmFuZG9tKCkgKiAxNTAgKyA1MDtcbiAgICB9XG5cbiAgICBfY3JlYXRlQ2xhc3MoQ2xvdWRJdGVtLCBbe1xuICAgICAga2V5OiAncmVuZGVyJyxcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICAgIHRoaXMuZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzcGFuJyk7XG4gICAgICAgIHRoaXMuZWwuaW5uZXJIVE1MID0gdGhpcy50ZXh0O1xuICAgICAgICB0aGlzLmVsLnN0eWxlLmZvbnRTaXplID0gdGhpcy5zaXplICsgJyUnO1xuICAgICAgICB0aGlzLmVsLnN0eWxlLmNvbG9yID0gJ3JnYignICsgdGhpcy5jb2xvciArICcsICcgKyB0aGlzLmNvbG9yICsgJywgJyArIHRoaXMuY29sb3IgKyAnKSc7XG4gICAgICAgIHRoaXMuZWwuY2xhc3NMaXN0LmFkZCgnY2xvdWRpdGVtJyk7XG4gICAgICAgIHRoaXMuaGFzQmVlblBvc2l0ZW5lZFJlbGF0aXZlbHkgPSBmYWxzZTtcbiAgICAgICAgcmV0dXJuIHRoaXMuZWw7XG4gICAgICB9XG4gICAgfV0pO1xuXG4gICAgcmV0dXJuIENsb3VkSXRlbTtcbiAgfSgpO1xuXG4gIHZhciBDbG91ZCA9IGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBDbG91ZChlbCkge1xuICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIENsb3VkKTtcblxuICAgICAgdGhpcy5lbCA9IGVsO1xuICAgICAgdGhpcy5lbC5jbGFzc0xpc3QuYWRkKCdpdGVtY2xvdWQnKTtcbiAgICAgIHRoaXMudGV4dEl0ZW1zID0gdGhpcy5lbC5pbm5lckhUTUwuc3BsaXQoLzxsaT4vKTtcbiAgICAgIC8vIHRoaXMudGV4dEl0ZW1zID0gdGhpcy5lbC5pbm5lckhUTUwuc3BsaXQoJ1xcbi0nKTtcbiAgICAgIHRoaXMuYnVpbGRDbG91ZEl0ZW1zKCk7XG4gICAgfVxuXG4gICAgX2NyZWF0ZUNsYXNzKENsb3VkLCBbe1xuICAgICAga2V5OiAnYnVpbGRDbG91ZEl0ZW1zJyxcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBidWlsZENsb3VkSXRlbXMoKSB7XG4gICAgICAgIHRoaXMuZWwuaW5uZXJIVE1MID0gJyc7XG4gICAgICAgIHRoaXMuaXRlbXMgPSBbXTtcbiAgICAgICAgdmFyIF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24gPSB0cnVlO1xuICAgICAgICB2YXIgX2RpZEl0ZXJhdG9yRXJyb3IgPSBmYWxzZTtcbiAgICAgICAgdmFyIF9pdGVyYXRvckVycm9yID0gdW5kZWZpbmVkO1xuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgZm9yICh2YXIgX2l0ZXJhdG9yID0gdGhpcy50ZXh0SXRlbXNbU3ltYm9sLml0ZXJhdG9yXSgpLCBfc3RlcDsgIShfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uID0gKF9zdGVwID0gX2l0ZXJhdG9yLm5leHQoKSkuZG9uZSk7IF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24gPSB0cnVlKSB7XG4gICAgICAgICAgICB2YXIgdGV4dCA9IF9zdGVwLnZhbHVlO1xuXG4gICAgICAgICAgICB0ZXh0ID0gdGV4dC50cmltKCk7XG4gICAgICAgICAgICBpZiAodGV4dCAhPT0gJycpIHtcbiAgICAgICAgICAgICAgdmFyIG5ld0l0ZW0gPSBuZXcgQ2xvdWRJdGVtKHRleHQpO1xuICAgICAgICAgICAgICB0aGlzLml0ZW1zLnB1c2gobmV3SXRlbSk7XG4gICAgICAgICAgICAgIHRoaXMuZWwuYXBwZW5kQ2hpbGQobmV3SXRlbS5yZW5kZXIoKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICBfZGlkSXRlcmF0b3JFcnJvciA9IHRydWU7XG4gICAgICAgICAgX2l0ZXJhdG9yRXJyb3IgPSBlcnI7XG4gICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGlmICghX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbiAmJiBfaXRlcmF0b3IucmV0dXJuKSB7XG4gICAgICAgICAgICAgIF9pdGVyYXRvci5yZXR1cm4oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgICAgaWYgKF9kaWRJdGVyYXRvckVycm9yKSB7XG4gICAgICAgICAgICAgIHRocm93IF9pdGVyYXRvckVycm9yO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1dKTtcblxuICAgIHJldHVybiBDbG91ZDtcbiAgfSgpO1xuXG4gIHZhciBpdGVtQ2xvdWRTbGlkZXMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCdbZGF0YS1zdGF0ZT1cIml0ZW1jbG91ZFwiXScpO1xuXG4gIFtdLmZvckVhY2guY2FsbChpdGVtQ2xvdWRTbGlkZXMsIGZ1bmN0aW9uIChlbCkge1xuICAgIG5ldyBDbG91ZChlbCk7XG4gIH0pO1xufSkoKTtcbiJdfQ==